statements      : NEWLINE* expr (NEWLINE+ expr)* NEWLINE*

expr            : KEYBOARD:var IDENIFIER EQ expr
                : comp_expr ((KEYWORDS:AND|KEYWORDS:OR) comp_expr)

comp_expr       : NOT comp_expr        
                : arith_expr ((EE|LT|GTE|LTE) arith_expr)*
        
arith_expr      : term ((PLUS|MINUS) term)*

term            : factor ((MUL|DIV) factor)*

factor          : INT|FLOAT
                : power 

power           : call (POW factor)*

call            : atom (LPAREN (expr (COMMA expr)*)? RPAREN)?

atom            : PLUS|MINUS|IDENIFIER
                : LPAREN expr RPAREN
                : ifexpr
                : for_expr
                : while_expr
                : func_expr

if_expr         : KEYWORD:IF expr KEYWORD:THEN
                (expr if_expr_b|if_expr_c?)
                (NEWLINE statements KEYWORD:END|if_expr_b|if_expr_c)

if_expr_b       : KEYWORD:ELSEIF
                expr
                (NEWLINE statements KEYWORD:END)            

if_expr_c       : KEYWORD:ELSE expr KEYWORD:THEN
                (expr if_expr_b|if_expr_c?)
                (NEWLINE statements KEYWORD:END|if_expr_b|if_expr_c)        

for_expr        : KEYBOARD:FOR IDENIFIER EQ expr KEYWORD:TO expr
                (KEYWORD:STEP expr)? KEYWORD:THEN 
                expr
                (NEWLINE statements KEYWORD:END)  

while_expr      : KEYWORD:WHILE expr KEYWORD:THEN
                expr
                (NEWLINE statements KEYWORD:END) 

func_def        : KEYWORD:FUNC IDENIFIER?
                LPAREN (IDENIFIER (COMMA IDENIFIER)*)? RPAREN
                ARROW expr
                (NEWLINE statements KEYWORD:END) 